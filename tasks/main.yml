---
- name: merge dictionaries
  block:
    - name: register default vars
      include_vars:
        file: ../../darexsu.php/defaults/main.yml
        name: php_default_vars

    - name: merge default and new dictionaries
      set_fact:
        "{{ item.key }}": "{{ php_default_vars[item.key] | combine(merge[item.key], recursive=True)}}"
      when: php_default_vars[item.key] is defined
      with_dict: "{{ merge }}"

    - name: combine defaults vars with merge dictionary
      set_fact:
        merge: "{{ php_default_vars | combine(merge, recursive=True)}}"
  when: merge is defined

- name: php role is disabled
  meta: end_play
  when: not php.enabled

- name: -> 01_PHP_install_{{ ansible_os_family }}.yml
  include_tasks: "./tasks/01_PHP_install_{{ ansible_os_family }}.yml"
  when: php_install.enabled

- name: service facts
  ansible.builtin.service_facts:

- name: -> 02_PHP_config_php_ini.yml
  include_tasks: "./tasks/02_PHP_config_php_ini.yml"
  when: php_ini.enabled and ansible_facts.services is search(php_const[ansible_os_family][php.repo]['modules_name'])

- name: -> 03_PHP_config_php_fpm.yml
  include_tasks: "./tasks/03_PHP_config_php_fpm.yml"
  with_dict: "{{ php_fpm }}"
  when: php_fpm[item.key]['enabled'] and ansible_facts.services is search(php_const[ansible_os_family][php.repo]['modules_name'])

- name: "ensure php service is {{ php.service.state }}"
  ansible.builtin.service:
    name: "{{ php_const[ansible_os_family][php.repo]['modules_name'] }}fpm"
    state: "{{ php['service']['state'] }}"
    enabled: "{{ php['service']['enabled'] }}"
  when: ansible_facts.services is search(php_const[ansible_os_family][php.repo]['modules_name'])